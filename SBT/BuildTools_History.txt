Credit of being first build tool goes to Make tool, It was created by Stuart Feldman in 1976 at Bell Labs and released its first version on 1977. It was widely used in Unix and Unix like OS e.g. GNU. Like every build tool which require its main configuration which describes the logic about what to compile, how to compile, where to get the dependencies, how to package the build etc. Make tool also required similar configuration file known as makefile. Makefile is file describing rules and target to carry out basic building process. Makefile tells Make how to compile and link a program. Using C/C++ as an example, when a C/C++ source file is changed, it must be recompiled. If a header file has changed, each C/C++ source file that includes the header file must be recompiled to be safe. Make tool was great for Unix OS and machine dependent languages e.g. C and C++. However Make tool lacked the portability and native support for Windows OS and thus was not suitable for Windows OS and platform independent language like Java who came 20 years later in 1995.

So when the Tomcat project team was developing a web server for Java, they needed a build tool who supports cross platform build..because one can use Java to write its application on any platform and so same build tool should work there as well. This is how 'Another Neat Tool'(ANT) born and later become top level project of Apache Software Foundation..and got its first release in year 2000. Ant solved the limitation of Make tool by being a cross-platform build tool because it was written in Java language and specifically for Java language. Apart from Java there was another language who was gaining popularity during the same time frame and that was XML whose first version XML 1.0 released in 1998 & got the W3C approval. Apache Ant used XML as its build configuration file i.e. build.xml because it was popular at that time, very easy to read/write and understand. Apart from Platform dependency issue, Make tool has portability issue(read here :https://en.wikipedia.org/wiki/Apache_Ant#Portability). As Make was using shell script and in shell script cleaning would use the command 'rm <dir>' which was not suitable for windows os which use 'rmdir <dir>' kind of command. Also the syntax in using filepath forward slash and backward slash was not same in Unix and Windows which means Make was not portable. Apache Ant fixed those portability by allowing user to whatever convention suits to build writer and internally converting those convention according to respective platform. So portability issue of Make tool get fixed with Ant. The strong point of Apache Ant was it was offering complete control of build. However this complete control and XML solution came with its price and price was verbosity. XML was too verbose and build developer has to take care everything from compilation of code to managing the dependencies.

This limitation of Ant tool made a team of Apache Turbine frustrated. Apache Turbine is servlet based framework to quickly build a web application. So they started writing their own build tool as a sub-project in year 2002 (Actually Maven's initial developement started in 2001 in Project Alexandriya but it was dis functioned) and that sub-project gave the birth to Maven. Later on Maven become top level project of Apache Software in Year 2003 and got its first release in 2004 i.e. Maven1.0 with project.xml as its main configuration file. In 2005 they came up with Maven2 and renamed project.xml to pom.xml. The real strength of Maven is its Dependency management, Convention or configuration e.g. Standard Project Structure

Here is the standard convention suggested by Maven : 

src/main/java		Application/Library sources
src/main/resources	Application/Library resources
src/main/filters	Resource filter files
src/main/config		Configuration files
src/main/scripts	Application/Library scripts
src/main/webapp		Web application sources
src/test/java		Test sources
src/test/resources	Test resources
src/test/filters	Test resource filter files
src/it				Integration Tests (primarily for plugins)
src/assembly		Assembly descriptors
src/site			Site
LICENSE.txt			Project's license
NOTICE.txt			Notices and attributions required by libraries that the project depends on
README.txt			Project's readme

With Maven, you only have to declare the dependencies and Maven will download them, setup the classpath for you,  and even deploy the dependencies with your application, if required. Maven manages not only the direct dependencies for you, but even the dependencies of the dependecies (transitive dependencies). This is the real strength of Maven. Ant doesn't have such capabilities out-of-the-box (except via Ivy) and it will take a considerable amount of work to emulate Maven's dependency management with Ant.

Even though both Ant and Maven are highly popular and have become industry standards, they have one weak point: build logic has to be described in XML. XML is great for describing hierarchical data, but falls short on expressing program flow and conditional logic. As the build script grows in complexity, maintaining the build code becomes a nightmare. To extend the functionality of build, Maven1 provided jelly-script using which you could write your custom build logic however jelly-script was limited as a programming language. Maven2 address this issue by allowing custom logic to be written in MOJO (Maven's plain old java object) plugin using Java language. However XML being the core part of Maven's build script was making the build definition too verbose and there were lots of boilerplate code which couldn't sustained him against the DSL based build tool emerged e.g. Gradle, SBT, Scons etc. Maven too realized this concern and started thinking to provide DSL based support in Maven. In March, 2015 they came up with the first release of Maven Polygot which supports converting your pom.xml into Ruby, Groovy, Scala, Closure, YAML.

So after having the short tour of How build tool got evolved, Now let's change our focus to SBT - Scala Build Tool.



---------------------------------------
Java/XML vs Annotation paradigm shift

JUnit 3 used inheritance:

  public class FileUtilTest extends TestCase {
  
  public void testFileCopy()  {

and JUnit 4 uses annotations:

  public class FileUtilTest {
    
  @Test
  public void testFileCopy()  {

---------------------------------------




virtue becomes curse
power comes with its price


On the Make

RAKE (Ruby's Make) - Build tool for Ruby having rakefiles similar to makefiles, DSL written in Ruby
FAKE - F# Make
SCon - Build tool for Python, DSL written in Python

DSL based build tool e.g. SBT, Scon, RAKE etc are cross platform, It means they support multiple platforms.